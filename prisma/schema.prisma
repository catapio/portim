generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Project {
    id         String      @id @default(dbgenerated("generate_hex_object_id()")) @db.VarChar(24)
    name       String      @db.VarChar(20)
    ownerId    String      @map("owner_id") @db.VarChar(36)
    users      String[]    @db.VarChar(36)
    interfaces Interface[]
    clients    Client[]
    createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz
    updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz

    @@map("projects")
}

model Interface {
    id              String    @id @default(dbgenerated("generate_hex_object_id()")) @db.VarChar(24)
    name            String    @db.VarChar(20)
    eventEndpoint   String    @map("event_endpoint") @db.Text
    controlEndpoint String    @map("control_endpoint") @db.Text
    control         String?   @db.VarChar(24) // id of first target interface if it isn't a target interface
    externalIdField String    @map("external_id_field") @db.Text
    projectId       String    @map("project_id") @db.VarChar(24)
    secretHash      String    @map("secret_hash") @db.Text
    secretSalt      String    @map("secret_salt") @db.Text
    sessions        Session[]
    createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
    updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("interfaces")
}

model Client {
    id         String    @id @default(dbgenerated("generate_hex_object_id()")) @db.VarChar(24)
    projectId  String    @map("project_id") @db.VarChar(24)
    externalId String    @map("external_id") @db.VarChar(50)
    metadata   Json      @db.JsonB
    sessions   Session[]
    createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
    updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("clients")
}

model Session {
    id        String    @id @default(dbgenerated("generate_hex_object_id()")) @db.VarChar(24)
    source    String    @db.VarChar(24) // interface id where client message is comming
    target    String    @db.VarChar(24) // interface id where client message goes
    clientId  String    @map("client_id") @db.VarChar(24)
    messages  Message[]
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
    updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz

    client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
    interface Interface @relation(fields: [source], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Message {
    id        String   @id @default(dbgenerated("generate_hex_object_id()")) @db.VarChar(24)
    sessionId String   @map("session_id") @db.VarChar(24)
    sender    String   @db.Text
    content   String   @db.Text // hash of the body request
    status    String   @db.VarChar(20)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

    session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@map("messages")
}
